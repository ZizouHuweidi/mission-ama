// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zizouhuweidi/mission-ama/ent/employee"
	"github.com/zizouhuweidi/mission-ama/ent/mission"
	"github.com/zizouhuweidi/mission-ama/ent/predicate"
	"github.com/zizouhuweidi/mission-ama/ent/project"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EmployeeUpdate) SetName(s string) *EmployeeUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetPhone sets the "phone" field.
func (eu *EmployeeUpdate) SetPhone(i int) *EmployeeUpdate {
	eu.mutation.ResetPhone()
	eu.mutation.SetPhone(i)
	return eu
}

// AddPhone adds i to the "phone" field.
func (eu *EmployeeUpdate) AddPhone(i int) *EmployeeUpdate {
	eu.mutation.AddPhone(i)
	return eu
}

// SetCSP sets the "CSP" field.
func (eu *EmployeeUpdate) SetCSP(b bool) *EmployeeUpdate {
	eu.mutation.SetCSP(b)
	return eu
}

// SetNillableCSP sets the "CSP" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableCSP(b *bool) *EmployeeUpdate {
	if b != nil {
		eu.SetCSP(*b)
	}
	return eu
}

// SetOccupation sets the "occupation" field.
func (eu *EmployeeUpdate) SetOccupation(s string) *EmployeeUpdate {
	eu.mutation.SetOccupation(s)
	return eu
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableOccupation(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetOccupation(*s)
	}
	return eu
}

// ClearOccupation clears the value of the "occupation" field.
func (eu *EmployeeUpdate) ClearOccupation() *EmployeeUpdate {
	eu.mutation.ClearOccupation()
	return eu
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (eu *EmployeeUpdate) AddMissionIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddMissionIDs(ids...)
	return eu
}

// AddMissions adds the "missions" edges to the Mission entity.
func (eu *EmployeeUpdate) AddMissions(m ...*Mission) *EmployeeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return eu.AddMissionIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (eu *EmployeeUpdate) AddProjectIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddProjectIDs(ids...)
	return eu
}

// AddProjects adds the "projects" edges to the Project entity.
func (eu *EmployeeUpdate) AddProjects(p ...*Project) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddProjectIDs(ids...)
}

// SetSuperviserID sets the "superviser" edge to the Employee entity by ID.
func (eu *EmployeeUpdate) SetSuperviserID(id int) *EmployeeUpdate {
	eu.mutation.SetSuperviserID(id)
	return eu
}

// SetNillableSuperviserID sets the "superviser" edge to the Employee entity by ID if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableSuperviserID(id *int) *EmployeeUpdate {
	if id != nil {
		eu = eu.SetSuperviserID(*id)
	}
	return eu
}

// SetSuperviser sets the "superviser" edge to the Employee entity.
func (eu *EmployeeUpdate) SetSuperviser(e *Employee) *EmployeeUpdate {
	return eu.SetSuperviserID(e.ID)
}

// AddSuperviseeIDs adds the "supervisee" edge to the Employee entity by IDs.
func (eu *EmployeeUpdate) AddSuperviseeIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddSuperviseeIDs(ids...)
	return eu
}

// AddSupervisee adds the "supervisee" edges to the Employee entity.
func (eu *EmployeeUpdate) AddSupervisee(e ...*Employee) *EmployeeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddSuperviseeIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// ClearMissions clears all "missions" edges to the Mission entity.
func (eu *EmployeeUpdate) ClearMissions() *EmployeeUpdate {
	eu.mutation.ClearMissions()
	return eu
}

// RemoveMissionIDs removes the "missions" edge to Mission entities by IDs.
func (eu *EmployeeUpdate) RemoveMissionIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveMissionIDs(ids...)
	return eu
}

// RemoveMissions removes "missions" edges to Mission entities.
func (eu *EmployeeUpdate) RemoveMissions(m ...*Mission) *EmployeeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return eu.RemoveMissionIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (eu *EmployeeUpdate) ClearProjects() *EmployeeUpdate {
	eu.mutation.ClearProjects()
	return eu
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (eu *EmployeeUpdate) RemoveProjectIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveProjectIDs(ids...)
	return eu
}

// RemoveProjects removes "projects" edges to Project entities.
func (eu *EmployeeUpdate) RemoveProjects(p ...*Project) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveProjectIDs(ids...)
}

// ClearSuperviser clears the "superviser" edge to the Employee entity.
func (eu *EmployeeUpdate) ClearSuperviser() *EmployeeUpdate {
	eu.mutation.ClearSuperviser()
	return eu
}

// ClearSupervisee clears all "supervisee" edges to the Employee entity.
func (eu *EmployeeUpdate) ClearSupervisee() *EmployeeUpdate {
	eu.mutation.ClearSupervisee()
	return eu
}

// RemoveSuperviseeIDs removes the "supervisee" edge to Employee entities by IDs.
func (eu *EmployeeUpdate) RemoveSuperviseeIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveSuperviseeIDs(ids...)
	return eu
}

// RemoveSupervisee removes "supervisee" edges to Employee entities.
func (eu *EmployeeUpdate) RemoveSupervisee(e ...*Employee) *EmployeeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveSuperviseeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if v, ok := eu.mutation.Name(); ok {
		if err := employee.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Employee.name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Occupation(); ok {
		if err := employee.OccupationValidator(v); err != nil {
			return &ValidationError{Name: "occupation", err: fmt.Errorf(`ent: validator failed for field "Employee.occupation": %w`, err)}
		}
	}
	return nil
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(employee.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Phone(); ok {
		_spec.SetField(employee.FieldPhone, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedPhone(); ok {
		_spec.AddField(employee.FieldPhone, field.TypeInt, value)
	}
	if value, ok := eu.mutation.CSP(); ok {
		_spec.SetField(employee.FieldCSP, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Occupation(); ok {
		_spec.SetField(employee.FieldOccupation, field.TypeString, value)
	}
	if eu.mutation.OccupationCleared() {
		_spec.ClearField(employee.FieldOccupation, field.TypeString)
	}
	if eu.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.MissionsTable,
			Columns: []string{employee.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedMissionsIDs(); len(nodes) > 0 && !eu.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.MissionsTable,
			Columns: []string{employee.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.MissionsTable,
			Columns: []string{employee.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ProjectsTable,
			Columns: []string{employee.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !eu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ProjectsTable,
			Columns: []string{employee.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ProjectsTable,
			Columns: []string{employee.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SuperviserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.SuperviserTable,
			Columns: []string{employee.SuperviserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SuperviserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.SuperviserTable,
			Columns: []string{employee.SuperviserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SuperviseeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SuperviseeTable,
			Columns: []string{employee.SuperviseeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSuperviseeIDs(); len(nodes) > 0 && !eu.mutation.SuperviseeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SuperviseeTable,
			Columns: []string{employee.SuperviseeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SuperviseeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SuperviseeTable,
			Columns: []string{employee.SuperviseeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetName sets the "name" field.
func (euo *EmployeeUpdateOne) SetName(s string) *EmployeeUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetPhone sets the "phone" field.
func (euo *EmployeeUpdateOne) SetPhone(i int) *EmployeeUpdateOne {
	euo.mutation.ResetPhone()
	euo.mutation.SetPhone(i)
	return euo
}

// AddPhone adds i to the "phone" field.
func (euo *EmployeeUpdateOne) AddPhone(i int) *EmployeeUpdateOne {
	euo.mutation.AddPhone(i)
	return euo
}

// SetCSP sets the "CSP" field.
func (euo *EmployeeUpdateOne) SetCSP(b bool) *EmployeeUpdateOne {
	euo.mutation.SetCSP(b)
	return euo
}

// SetNillableCSP sets the "CSP" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableCSP(b *bool) *EmployeeUpdateOne {
	if b != nil {
		euo.SetCSP(*b)
	}
	return euo
}

// SetOccupation sets the "occupation" field.
func (euo *EmployeeUpdateOne) SetOccupation(s string) *EmployeeUpdateOne {
	euo.mutation.SetOccupation(s)
	return euo
}

// SetNillableOccupation sets the "occupation" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableOccupation(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetOccupation(*s)
	}
	return euo
}

// ClearOccupation clears the value of the "occupation" field.
func (euo *EmployeeUpdateOne) ClearOccupation() *EmployeeUpdateOne {
	euo.mutation.ClearOccupation()
	return euo
}

// AddMissionIDs adds the "missions" edge to the Mission entity by IDs.
func (euo *EmployeeUpdateOne) AddMissionIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddMissionIDs(ids...)
	return euo
}

// AddMissions adds the "missions" edges to the Mission entity.
func (euo *EmployeeUpdateOne) AddMissions(m ...*Mission) *EmployeeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return euo.AddMissionIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (euo *EmployeeUpdateOne) AddProjectIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddProjectIDs(ids...)
	return euo
}

// AddProjects adds the "projects" edges to the Project entity.
func (euo *EmployeeUpdateOne) AddProjects(p ...*Project) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddProjectIDs(ids...)
}

// SetSuperviserID sets the "superviser" edge to the Employee entity by ID.
func (euo *EmployeeUpdateOne) SetSuperviserID(id int) *EmployeeUpdateOne {
	euo.mutation.SetSuperviserID(id)
	return euo
}

// SetNillableSuperviserID sets the "superviser" edge to the Employee entity by ID if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableSuperviserID(id *int) *EmployeeUpdateOne {
	if id != nil {
		euo = euo.SetSuperviserID(*id)
	}
	return euo
}

// SetSuperviser sets the "superviser" edge to the Employee entity.
func (euo *EmployeeUpdateOne) SetSuperviser(e *Employee) *EmployeeUpdateOne {
	return euo.SetSuperviserID(e.ID)
}

// AddSuperviseeIDs adds the "supervisee" edge to the Employee entity by IDs.
func (euo *EmployeeUpdateOne) AddSuperviseeIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddSuperviseeIDs(ids...)
	return euo
}

// AddSupervisee adds the "supervisee" edges to the Employee entity.
func (euo *EmployeeUpdateOne) AddSupervisee(e ...*Employee) *EmployeeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddSuperviseeIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// ClearMissions clears all "missions" edges to the Mission entity.
func (euo *EmployeeUpdateOne) ClearMissions() *EmployeeUpdateOne {
	euo.mutation.ClearMissions()
	return euo
}

// RemoveMissionIDs removes the "missions" edge to Mission entities by IDs.
func (euo *EmployeeUpdateOne) RemoveMissionIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveMissionIDs(ids...)
	return euo
}

// RemoveMissions removes "missions" edges to Mission entities.
func (euo *EmployeeUpdateOne) RemoveMissions(m ...*Mission) *EmployeeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return euo.RemoveMissionIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (euo *EmployeeUpdateOne) ClearProjects() *EmployeeUpdateOne {
	euo.mutation.ClearProjects()
	return euo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (euo *EmployeeUpdateOne) RemoveProjectIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveProjectIDs(ids...)
	return euo
}

// RemoveProjects removes "projects" edges to Project entities.
func (euo *EmployeeUpdateOne) RemoveProjects(p ...*Project) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveProjectIDs(ids...)
}

// ClearSuperviser clears the "superviser" edge to the Employee entity.
func (euo *EmployeeUpdateOne) ClearSuperviser() *EmployeeUpdateOne {
	euo.mutation.ClearSuperviser()
	return euo
}

// ClearSupervisee clears all "supervisee" edges to the Employee entity.
func (euo *EmployeeUpdateOne) ClearSupervisee() *EmployeeUpdateOne {
	euo.mutation.ClearSupervisee()
	return euo
}

// RemoveSuperviseeIDs removes the "supervisee" edge to Employee entities by IDs.
func (euo *EmployeeUpdateOne) RemoveSuperviseeIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveSuperviseeIDs(ids...)
	return euo
}

// RemoveSupervisee removes "supervisee" edges to Employee entities.
func (euo *EmployeeUpdateOne) RemoveSupervisee(e ...*Employee) *EmployeeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveSuperviseeIDs(ids...)
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (euo *EmployeeUpdateOne) Where(ps ...predicate.Employee) *EmployeeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if v, ok := euo.mutation.Name(); ok {
		if err := employee.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Employee.name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Occupation(); ok {
		if err := employee.OccupationValidator(v); err != nil {
			return &ValidationError{Name: "occupation", err: fmt.Errorf(`ent: validator failed for field "Employee.occupation": %w`, err)}
		}
	}
	return nil
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(employee.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Phone(); ok {
		_spec.SetField(employee.FieldPhone, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedPhone(); ok {
		_spec.AddField(employee.FieldPhone, field.TypeInt, value)
	}
	if value, ok := euo.mutation.CSP(); ok {
		_spec.SetField(employee.FieldCSP, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Occupation(); ok {
		_spec.SetField(employee.FieldOccupation, field.TypeString, value)
	}
	if euo.mutation.OccupationCleared() {
		_spec.ClearField(employee.FieldOccupation, field.TypeString)
	}
	if euo.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.MissionsTable,
			Columns: []string{employee.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedMissionsIDs(); len(nodes) > 0 && !euo.mutation.MissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.MissionsTable,
			Columns: []string{employee.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.MissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.MissionsTable,
			Columns: []string{employee.MissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ProjectsTable,
			Columns: []string{employee.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !euo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ProjectsTable,
			Columns: []string{employee.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ProjectsTable,
			Columns: []string{employee.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SuperviserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.SuperviserTable,
			Columns: []string{employee.SuperviserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SuperviserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.SuperviserTable,
			Columns: []string{employee.SuperviserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SuperviseeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SuperviseeTable,
			Columns: []string{employee.SuperviseeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSuperviseeIDs(); len(nodes) > 0 && !euo.mutation.SuperviseeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SuperviseeTable,
			Columns: []string{employee.SuperviseeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SuperviseeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.SuperviseeTable,
			Columns: []string{employee.SuperviseeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
