// Code generated by ent, DO NOT EDIT.

package employee

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldCSP holds the string denoting the csp field in the database.
	FieldCSP = "csp"
	// FieldOccupation holds the string denoting the occupation field in the database.
	FieldOccupation = "occupation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMission holds the string denoting the mission edge name in mutations.
	EdgeMission = "mission"
	// Table holds the table name of the employee in the database.
	Table = "employees"
	// MissionTable is the table that holds the mission relation/edge.
	MissionTable = "missions"
	// MissionInverseTable is the table name for the Mission entity.
	// It exists in this package in order to avoid circular dependency with the "mission" package.
	MissionInverseTable = "missions"
	// MissionColumn is the table column denoting the mission relation/edge.
	MissionColumn = "mission_employee"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPhone,
	FieldCSP,
	FieldOccupation,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCSP holds the default value on creation for the "CSP" field.
	DefaultCSP bool
	// OccupationValidator is a validator for the "occupation" field. It is called by the builders before save.
	OccupationValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByCSP orders the results by the CSP field.
func ByCSP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCSP, opts...).ToFunc()
}

// ByOccupation orders the results by the occupation field.
func ByOccupation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOccupation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMissionCount orders the results by mission count.
func ByMissionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMissionStep(), opts...)
	}
}

// ByMission orders the results by mission terms.
func ByMission(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMissionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MissionTable, MissionColumn),
	)
}
