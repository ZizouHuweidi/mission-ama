// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zizouhuweidi/mission-ama/ent/employee"
	"github.com/zizouhuweidi/mission-ama/ent/mission"
	"github.com/zizouhuweidi/mission-ama/ent/project"
)

// MissionCreate is the builder for creating a Mission entity.
type MissionCreate struct {
	config
	mutation *MissionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *MissionCreate) SetName(s string) *MissionCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetPurpose sets the "purpose" field.
func (mc *MissionCreate) SetPurpose(s string) *MissionCreate {
	mc.mutation.SetPurpose(s)
	return mc
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (mc *MissionCreate) SetNillablePurpose(s *string) *MissionCreate {
	if s != nil {
		mc.SetPurpose(*s)
	}
	return mc
}

// SetDestination sets the "destination" field.
func (mc *MissionCreate) SetDestination(s string) *MissionCreate {
	mc.mutation.SetDestination(s)
	return mc
}

// SetStartDate sets the "startDate" field.
func (mc *MissionCreate) SetStartDate(t time.Time) *MissionCreate {
	mc.mutation.SetStartDate(t)
	return mc
}

// SetNillableStartDate sets the "startDate" field if the given value is not nil.
func (mc *MissionCreate) SetNillableStartDate(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetStartDate(*t)
	}
	return mc
}

// SetEndDate sets the "endDate" field.
func (mc *MissionCreate) SetEndDate(t time.Time) *MissionCreate {
	mc.mutation.SetEndDate(t)
	return mc
}

// SetNillableEndDate sets the "endDate" field if the given value is not nil.
func (mc *MissionCreate) SetNillableEndDate(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetEndDate(*t)
	}
	return mc
}

// SetTransport sets the "transport" field.
func (mc *MissionCreate) SetTransport(s string) *MissionCreate {
	mc.mutation.SetTransport(s)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MissionCreate) SetCreatedAt(t time.Time) *MissionCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MissionCreate) SetNillableCreatedAt(t *time.Time) *MissionCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (mc *MissionCreate) SetEmployeeID(id int) *MissionCreate {
	mc.mutation.SetEmployeeID(id)
	return mc
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (mc *MissionCreate) SetNillableEmployeeID(id *int) *MissionCreate {
	if id != nil {
		mc = mc.SetEmployeeID(*id)
	}
	return mc
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (mc *MissionCreate) SetEmployee(e *Employee) *MissionCreate {
	return mc.SetEmployeeID(e.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (mc *MissionCreate) SetProjectID(id int) *MissionCreate {
	mc.mutation.SetProjectID(id)
	return mc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (mc *MissionCreate) SetNillableProjectID(id *int) *MissionCreate {
	if id != nil {
		mc = mc.SetProjectID(*id)
	}
	return mc
}

// SetProject sets the "project" edge to the Project entity.
func (mc *MissionCreate) SetProject(p *Project) *MissionCreate {
	return mc.SetProjectID(p.ID)
}

// Mutation returns the MissionMutation object of the builder.
func (mc *MissionCreate) Mutation() *MissionMutation {
	return mc.mutation
}

// Save creates the Mission in the database.
func (mc *MissionCreate) Save(ctx context.Context) (*Mission, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MissionCreate) SaveX(ctx context.Context) *Mission {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MissionCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MissionCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MissionCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := mission.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MissionCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Mission.name"`)}
	}
	if v, ok := mc.mutation.Name(); ok {
		if err := mission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Mission.name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Destination(); !ok {
		return &ValidationError{Name: "destination", err: errors.New(`ent: missing required field "Mission.destination"`)}
	}
	if v, ok := mc.mutation.Destination(); ok {
		if err := mission.DestinationValidator(v); err != nil {
			return &ValidationError{Name: "destination", err: fmt.Errorf(`ent: validator failed for field "Mission.destination": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Transport(); !ok {
		return &ValidationError{Name: "transport", err: errors.New(`ent: missing required field "Mission.transport"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Mission.created_at"`)}
	}
	return nil
}

func (mc *MissionCreate) sqlSave(ctx context.Context) (*Mission, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MissionCreate) createSpec() (*Mission, *sqlgraph.CreateSpec) {
	var (
		_node = &Mission{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mission.Table, sqlgraph.NewFieldSpec(mission.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(mission.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Purpose(); ok {
		_spec.SetField(mission.FieldPurpose, field.TypeString, value)
		_node.Purpose = value
	}
	if value, ok := mc.mutation.Destination(); ok {
		_spec.SetField(mission.FieldDestination, field.TypeString, value)
		_node.Destination = value
	}
	if value, ok := mc.mutation.StartDate(); ok {
		_spec.SetField(mission.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := mc.mutation.EndDate(); ok {
		_spec.SetField(mission.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := mc.mutation.Transport(); ok {
		_spec.SetField(mission.FieldTransport, field.TypeString, value)
		_node.Transport = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(mission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mission.EmployeeTable,
			Columns: []string{mission.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mission_employee = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mission.ProjectTable,
			Columns: []string{mission.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mission_project = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MissionCreateBulk is the builder for creating many Mission entities in bulk.
type MissionCreateBulk struct {
	config
	builders []*MissionCreate
}

// Save creates the Mission entities in the database.
func (mcb *MissionCreateBulk) Save(ctx context.Context) ([]*Mission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mission, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MissionCreateBulk) SaveX(ctx context.Context) []*Mission {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MissionCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MissionCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
