// Code generated by ent, DO NOT EDIT.

package employee

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/zizouhuweidi/mission-ama/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldName, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v int) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldPhone, v))
}

// CSP applies equality check predicate on the "CSP" field. It's identical to CSPEQ.
func CSP(v bool) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCSP, v))
}

// Occupation applies equality check predicate on the "occupation" field. It's identical to OccupationEQ.
func Occupation(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldOccupation, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldName, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v int) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v int) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...int) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...int) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v int) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v int) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v int) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v int) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldPhone, v))
}

// CSPEQ applies the EQ predicate on the "CSP" field.
func CSPEQ(v bool) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCSP, v))
}

// CSPNEQ applies the NEQ predicate on the "CSP" field.
func CSPNEQ(v bool) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldCSP, v))
}

// OccupationEQ applies the EQ predicate on the "occupation" field.
func OccupationEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldOccupation, v))
}

// OccupationNEQ applies the NEQ predicate on the "occupation" field.
func OccupationNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldOccupation, v))
}

// OccupationIn applies the In predicate on the "occupation" field.
func OccupationIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldOccupation, vs...))
}

// OccupationNotIn applies the NotIn predicate on the "occupation" field.
func OccupationNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldOccupation, vs...))
}

// OccupationGT applies the GT predicate on the "occupation" field.
func OccupationGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldOccupation, v))
}

// OccupationGTE applies the GTE predicate on the "occupation" field.
func OccupationGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldOccupation, v))
}

// OccupationLT applies the LT predicate on the "occupation" field.
func OccupationLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldOccupation, v))
}

// OccupationLTE applies the LTE predicate on the "occupation" field.
func OccupationLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldOccupation, v))
}

// OccupationContains applies the Contains predicate on the "occupation" field.
func OccupationContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldOccupation, v))
}

// OccupationHasPrefix applies the HasPrefix predicate on the "occupation" field.
func OccupationHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldOccupation, v))
}

// OccupationHasSuffix applies the HasSuffix predicate on the "occupation" field.
func OccupationHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldOccupation, v))
}

// OccupationIsNil applies the IsNil predicate on the "occupation" field.
func OccupationIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldOccupation))
}

// OccupationNotNil applies the NotNil predicate on the "occupation" field.
func OccupationNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldOccupation))
}

// OccupationEqualFold applies the EqualFold predicate on the "occupation" field.
func OccupationEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldOccupation, v))
}

// OccupationContainsFold applies the ContainsFold predicate on the "occupation" field.
func OccupationContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldOccupation, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldCreatedAt, v))
}

// HasMissions applies the HasEdge predicate on the "missions" edge.
func HasMissions() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MissionsTable, MissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMissionsWith applies the HasEdge predicate on the "missions" edge with a given conditions (other predicates).
func HasMissionsWith(preds ...predicate.Mission) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := newMissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjects applies the HasEdge predicate on the "projects" edge.
func HasProjects() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectsTable, ProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectsWith applies the HasEdge predicate on the "projects" edge with a given conditions (other predicates).
func HasProjectsWith(preds ...predicate.Project) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := newProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSuperviser applies the HasEdge predicate on the "superviser" edge.
func HasSuperviser() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SuperviserTable, SuperviserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSuperviserWith applies the HasEdge predicate on the "superviser" edge with a given conditions (other predicates).
func HasSuperviserWith(preds ...predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := newSuperviserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSupervisee applies the HasEdge predicate on the "supervisee" edge.
func HasSupervisee() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SuperviseeTable, SuperviseeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSuperviseeWith applies the HasEdge predicate on the "supervisee" edge with a given conditions (other predicates).
func HasSuperviseeWith(preds ...predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := newSuperviseeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		p(s.Not())
	})
}
